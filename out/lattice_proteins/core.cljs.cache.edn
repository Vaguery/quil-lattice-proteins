{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name lattice-proteins.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {random-marker-chain {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 6, :column 7, :end-line 6, :end-column 26, :arglists (quote ([length scale])), :doc "Returns a list of indicated length, containing uniform random integers between 0 and `scale`"}, :name lattice-proteins.core/random-marker-chain, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 26, :method-params ([length scale]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([length scale])), :doc "Returns a list of indicated length, containing uniform random integers between 0 and `scale`"}, setup {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 12, :column 7, :end-line 12, :end-column 12, :arglists (quote ([]))}, :name lattice-proteins.core/setup, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 24, :column 7, :end-line 24, :end-column 19, :arglists (quote ([state]))}, :name lattice-proteins.core/update-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 33, :column 7, :end-line 33, :end-column 17, :arglists (quote ([state]))}, :name lattice-proteins.core/draw-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, lattice-proteins {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 48, :column 14, :end-line 48, :end-column 30, :export true, :arglists (quote ([]))}, :name lattice-proteins.core/lattice-proteins, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:hsb :fn :cursor :update :east :size :setup :middleware :host :markers :host-id :no-start :draw :direction}, :order [:hsb :cursor :direction :markers :east :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}