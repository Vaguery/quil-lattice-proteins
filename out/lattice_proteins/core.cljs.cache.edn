{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name lattice-proteins.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {cell-size {:name lattice-proteins.core/cell-size, :file "src/lattice_proteins/core.cljs", :line 5, :column 1, :end-line 5, :end-column 15, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 5, :column 6, :end-line 5, :end-column 15}}, setup {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([]))}, :name lattice-proteins.core/setup, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 19, :column 7, :end-line 19, :end-column 19, :arglists (quote ([state]))}, :name lattice-proteins.core/update-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, move-cursor {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([[i j] direction]))}, :name lattice-proteins.core/move-cursor, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 18, :method-params ([p__35620 direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[i j] direction]))}, connector-line {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 36, :column 7, :end-line 36, :end-column 21, :arglists (quote ([dir scale]))}, :name lattice-proteins.core/connector-line, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 21, :method-params ([dir scale]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dir scale]))}, draw-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 46, :column 7, :end-line 46, :end-column 17, :arglists (quote ([state]))}, :name lattice-proteins.core/draw-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, lattice-proteins {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 69, :column 14, :end-line 69, :end-column 30, :export true, :arglists (quote ([]))}, :name lattice-proteins.core/lattice-proteins, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:hsb :fn :west :south :cursor :update :east :size :setup :middleware :host :chain :host-id :no-start :draw :north}, :order [:hsb :chain :cursor :east :north :south :west :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}