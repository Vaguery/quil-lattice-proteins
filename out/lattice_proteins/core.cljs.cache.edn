{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name lattice-proteins.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {setup {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([]))}, :name lattice-proteins.core/setup, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 17, :column 7, :end-line 17, :end-column 19, :arglists (quote ([state]))}, :name lattice-proteins.core/update-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([state]))}, :name lattice-proteins.core/draw-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, lattice-proteins {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 38, :column 14, :end-line 38, :end-column 30, :export true, :arglists (quote ([]))}, :name lattice-proteins.core/lattice-proteins, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:hsb :fn :color :cursor :update :east :angle :size :setup :middleware :host :host-id :no-start :draw :direction}, :order [:hsb :cursor :direction :color :angle :east :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}