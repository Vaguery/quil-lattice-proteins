{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name lattice-proteins.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {draw-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 97, :column 7, :end-line 97, :end-column 17, :arglists (quote ([state]))}, :name lattice-proteins.core/draw-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-state {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 70, :column 7, :end-line 70, :end-column 19, :arglists (quote ([state]))}, :name lattice-proteins.core/update-state, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, cell-size {:name lattice-proteins.core/cell-size, :file "src/lattice_proteins/core.cljs", :line 6, :column 1, :end-line 6, :end-column 15, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 6, :column 6, :end-line 6, :end-column 15}}, lattice-proteins {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 122, :column 14, :end-line 122, :end-column 30, :export true, :arglists (quote ([]))}, :name lattice-proteins.core/lattice-proteins, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, collisions? {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 63, :column 7, :end-line 63, :end-column 18, :arglists (quote ([chain]))}, :name lattice-proteins.core/collisions?, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 18, :method-params ([chain]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chain]))}, end-point {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 86, :column 7, :end-line 86, :end-column 16, :arglists (quote ([dir scale]))}, :name lattice-proteins.core/end-point, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 16, :method-params ([dir scale]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dir scale]))}, all-ij {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 52, :column 7, :end-line 52, :end-column 13, :arglists (quote ([start-ij chain]))}, :name lattice-proteins.core/all-ij, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 13, :method-params ([start-ij chain]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start-ij chain]))}, next-ij {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 41, :column 7, :end-line 41, :end-column 14, :arglists (quote ([[i j] direction]))}, :name lattice-proteins.core/next-ij, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 14, :method-params ([p__39416 direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[i j] direction]))}, random-fold {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 29, :column 7, :end-line 29, :end-column 18, :arglists (quote ([chain]))}, :name lattice-proteins.core/random-fold, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 18, :method-params ([chain]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chain]))}, setup {:protocol-inline nil, :meta {:file "/Users/bill/programming/clojure/lattice-proteins/src/lattice_proteins/core.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([]))}, :name lattice-proteins.core/setup, :variadic false, :file "src/lattice_proteins/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:hsb :fn :frustration :west :south :cursor :update :east :size :setup :middleware :host :chain :host-id :no-start :draw :updates :north}, :order [:hsb :chain :cursor :frustration :updates :east :north :west :south :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}